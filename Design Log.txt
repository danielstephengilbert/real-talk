
2024-08-03

How would this software be used in practice?

For simplicity, and to start,
only support one server running on a host
at a time.

host (server):  > ./rt
                > Please enter a password that
                > will be required to join this chat:
                > (types password then presses enter)

                (rt starts server listening on 0.0.0.0 by default
                to simplify for non-technical users, and even
                automatically finds a port number to use that is not taken.
                The password is required for people to connect, but is only
                the first line of defense. The project will later incorporate
                GPG for every user so that all messages are encrypted
                and decrypted by automatically using the relevant key pairs.
                In addition, everyone will see if an unknown user joins,
                so they can stop talking if someone has broken in.
                New users will not see chats prior to when they joined.)

                > Server has been started.
                > The password is: (password)

                > All users will be prompted for the password upon connecting.

                > They have 3 password attempts.
                > If they fail the first 3, they will get disconnected
                > and you will be notified.
                > They can reconnect a second time and enter 3 more passwords,
                > but if those fail, they will be automatically blocked,
                > and you will have to unblock them. You will be notified.

                (Include geolocation/IP ownership info in notifications
                if I can pull that info without relying too much on a
                third-party or sending unwanted telemetry to those
                services. Maybe keep a cached copy of all the relevant
                geo/IP info so that queries aren't constantly being made,
                and the user can manually update the cache only if they desire.)

                (I'm trying to make this program as simple as possible to use
                for non-technical people.)

                > For people on the same computer network (WiFi, cable, etc.),
                > if they want to join, have them type
                > ./rt X.X.X.X XXXXX

                (If the user has multiple local IPs, list them for the user
                with instructions.)

                > For people outside of your computer network
                > (remote locations on the Internet),
                > if they want to join, have them type
                > ./rt Y.Y.Y.Y XXXXX (User's public IP is shown.)
                
                (goes to background)

                > ./rt
                > Password: (types password, then presses enter)
                (joins server they just created)

client:         > ./rt remote_public_ip port

                (connects to server via NAT bypass or port forwarding, etc.)

                > Password: (types password, then presses enter)

                "Hey, what's up?"

host (server):  "Alright, talk to you later."

                (ctrl+c, disconnects self and all connected clients)

---

Will slow down and take things one step at a time.
I don't even have a chat client yet.
Get that working on my machine and the local network,
then worry about NAT, etc.

I just ordered a couple of books on Unix Network Programming
by W. Richard Stevens.
They look very thorough, and will be a nice deeper dive
than what I've been following with
Beej's Guide to Network Programming
(https://beej.us/guide/bgnet/html/)
which is helpful, but leaves me wanting more explanations.

I also starred the source for UnreadIRCd
(https://github.com/unrealircd/unrealircd)
in case that comes in handy,
since what I'm going for is very similar to IRC.

I'm gonna play with the code from Beej
in a separate offline project
just to familiarize myself with the concepts,
and modify the code to suit my preferences.

Will start adding the network code to this project
once I have a better handle on that.

===

2024-08-02

Practical usage....

> rt -s local_ip port
rt server started on local_ip:port.
Your public IP address is: XXX.XXX.XXX.XXX.
Using default address (X.X.X.X) hop metrics to bypass NAT.

Note: I just tested pwnat
      (https://github.com/samyk/pwnat)
      that leverages udptunnel by Daniel Meekins
      (https://code.google.com/archive/p/udptunnel/)
      to test NAT traversal in advance of using it in this project.
      Unfortunately, it did not work as expected.

      Not sure if the technique is being blocked in my setup,
      or if the tool needs to be updated.

      In either case,
      I'd prefer to leverage the underlying concepts
      to build my own implementation if it's still feasible.

===

2024-07-30

Top-Level Ideas and Design Considerations...

- Build this whole thing from scratch
  so that I know the supply chain
  is not compromised!

- Still need to trust
  the C compiler and libraries used.
  - Think of a clever way to
    verify that none of that is invalid.
    - E.g., When code compiles,
      always compare compiler and all dependencies
      to currently used versions and hashes.
    - Manually update the hashes
      when updating the local supply chain components.
    - And remember,
      all this is useless
      if the operating system,
      or layers beneath the application
      are compromised.

- In addition, there could be network compromise,
  but if everything is done right,
  that would depend on breaking the encryption.
  - Need to protect against
    quantum.

---

Usage Ideas (these will evolve as I build this out...)

server: rt -s ip port
client: rt -c ip port

In both cases,
ctrl+c should terminate the program
and all related connections.
